openapi: 3.0.0
info:
  title: Chaos
  version: "1.0.0"
  description: Central Management API - publicly exposed set of APIs for managing deployments
  contact:
    email: support@qernal.com
  x-logo:
    url: /assets/components/chaos.png
    backgroundColor: "#FFFFFF"
    altText: Qernal Chaos
servers:
  - url: "https://chaos.qernal.com/v1"
    description: Production
security:
  - token: []
  - cookie: []

paths:
  # '/service/health':
  #   get:
  #     summary: System Health
  #     tags:
  #       - service
  #     responses:
  #       '200':
  #         $ref: '#/components/responses/HealthCheck'
  #     operationId: get-system-health
  #     description: Get health of Chaos
  # organisations
  "/organisations":
    get:
      parameters:
        - $ref: "#/components/parameters/pagination_page"
      summary: List organisations
      tags:
        - organisations
      security:
        - token: []
        - cookie: []
      responses:
        "200":
          $ref: "#/components/responses/ListOrganisations"
        "403":
          $ref: "#/components/responses/Unauthorised"
      operationId: organisations-list
      description: List organisations
    post:
      summary: Create organisations
      operationId: organisations-create
      responses:
        "201":
          $ref: "#/components/responses/Organisation"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Unauthorised"
        "409":
          $ref: "#/components/responses/ResourceConflict"
      description: Create an organisation
      tags:
        - organisations
      security:
        - token: []
        - cookie: []
      requestBody:
        $ref: "#/components/requestBodies/OrganisationBody"

  "/organisations/{organisation_id}":
    parameters:
      - $ref: "#/components/parameters/organisation_id"
    get:
      summary: Get an organisation
      tags:
        - organisations
      security:
        - token: []
        - cookie: []
      responses:
        "200":
          $ref: "#/components/responses/Organisation"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "403":
          $ref: "#/components/responses/Unauthorised"
      operationId: organisations-get
      description: Get a single organisation
    put:
      summary: Update an organisation
      operationId: organisations-update
      responses:
        "200":
          $ref: "#/components/responses/Organisation"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Unauthorised"
      description: Update an organisation
      tags:
        - organisations
      security:
        - token: []
        - cookie: []
      requestBody:
        $ref: "#/components/requestBodies/OrganisationBody"
    delete:
      summary: Delete an organisation
      operationId: organisations-delete
      responses:
        "200":
          $ref: "#/components/responses/ResourceDeleted"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "403":
          $ref: "#/components/responses/Unauthorised"
      description: Delete organisation, this will also delete all the resources within the organisation
      tags:
        - organisations
      security:
        - token: []
        - cookie: []

  "/organisations/{organisation_id}/projects":
    parameters:
      - $ref: "#/components/parameters/organisation_id"
    get:
      parameters:
        - $ref: "#/components/parameters/pagination_page"
      summary: Get all projects within an organisation
      tags:
        - projects
      security:
        - token: []
        - cookie: []
      responses:
        "200":
          $ref: "#/components/responses/ListProjects"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "403":
          $ref: "#/components/responses/Unauthorised"
      operationId: organisations-projects-list
      description: Get all the projects linked to a specific organisation
  # projects
  "/projects":
    get:
      parameters:
        - $ref: "#/components/parameters/pagination_page"
      summary: List projects
      tags:
        - projects
      security:
        - token: []
        - cookie: []
      responses:
        "200":
          $ref: "#/components/responses/ListProjects"
        "403":
          $ref: "#/components/responses/Unauthorised"
      operationId: projects-list
      description: "Get all projects for this user, paginated"
    post:
      summary: Create project
      operationId: projects-create
      responses:
        "201":
          $ref: "#/components/responses/Project"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Unauthorised"
        "409":
          $ref: "#/components/responses/ResourceConflict"
      description: Create a new project
      requestBody:
        $ref: "#/components/requestBodies/ProjectBody"
      tags:
        - projects
      security:
        - token: []
        - cookie: []

  "/projects/{project_id}":
    parameters:
      - $ref: "#/components/parameters/project_id"
    get:
      summary: Get project
      tags:
        - projects
      security:
        - token: []
        - cookie: []
      responses:
        "200":
          $ref: "#/components/responses/Project"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "403":
          $ref: "#/components/responses/Unauthorised"
      operationId: projects-get
      description: Get a specific project
    put:
      summary: Update project
      operationId: projects-update
      responses:
        "200":
          $ref: "#/components/responses/Project"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Unauthorised"
      description: Update project
      requestBody:
        $ref: "#/components/requestBodies/ProjectBodyPatch"
      tags:
        - projects
      security:
        - token: []
        - cookie: []
    delete:
      summary: Delete project
      operationId: projects-delete
      responses:
        "200":
          $ref: "#/components/responses/ResourceDeleted"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "403":
          $ref: "#/components/responses/Unauthorised"
      description: Delete project, this will also delete all the resources within the project
      tags:
        - projects
      security:
        - token: []
        - cookie: []
  # secrets
  "/projects/{project_id}/secrets":
    parameters:
      - $ref: "#/components/parameters/project_id"
    get:
      parameters:
        - $ref: "#/components/parameters/pagination_page"
        - $ref: "#/components/parameters/secret_type"
      summary: List project secrets of a specific type
      tags:
        - secrets
      security:
        - token: []
        - cookie: []
      responses:
        "200":
          $ref: "#/components/responses/ListSecrets"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "403":
          $ref: "#/components/responses/Unauthorised"
      operationId: projects-secrets-list
      description: List project secrets of a specific type
    post:
      summary: Create project secret
      operationId: projects-secrets-create
      responses:
        "201":
          $ref: "#/components/responses/Secret"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Unauthorised"
        "409":
          $ref: "#/components/responses/ResourceConflict"
      description: Create a new project secret
      requestBody:
        $ref: "#/components/requestBodies/SecretBody"
      tags:
        - secrets
      security:
        - token: []
        - cookie: []
  "/projects/{project_id}/secrets/{secret_name}":
    parameters:
      - $ref: "#/components/parameters/project_id"
      - $ref: "#/components/parameters/secret_name"
    get:
      summary: Get project secret
      tags:
        - secrets
      security:
        - token: []
        - cookie: []
      responses:
        "200":
          $ref: "#/components/responses/SecretMeta"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "403":
          $ref: "#/components/responses/Unauthorised"
      operationId: projects-secrets-get
      description: Get a specific project
    put:
      summary: Update project secret
      operationId: projects-secrets-update
      responses:
        "200":
          $ref: "#/components/responses/Secret"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Unauthorised"
      description: Update project
      requestBody:
        $ref: "#/components/requestBodies/SecretBodyPatch"
      tags:
        - secrets
      security:
        - token: []
        - cookie: []
    delete:
      summary: Delete project secret
      operationId: projects-secrets-delete
      responses:
        "200":
          $ref: "#/components/responses/ResourceDeleted"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "403":
          $ref: "#/components/responses/Unauthorised"
      description: Delete project secret, if the secret is still linked to an active/deployed function - it cannot be removed
      tags:
        - secrets
      security:
        - token: []
        - cookie: []

  /auth/tokens:
    post:
      summary: Create new auth token
      description: Create new OAuth client which can be used to access user private data
      tags:
        - tokens
      requestBody:
        $ref: "#/components/requestBodies/AuthTokenBody"
      responses:
        "200":
          $ref: "#/components/responses/AuthToken"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
      operationId: auth-tokens-create
    get:
      summary: List all user auth tokens
      tags:
        - tokens
      parameters:
        - $ref: "#/components/parameters/pagination_page"
      responses:
        "200":
          $ref: "#/components/responses/AuthTokenList"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
      operationId: auth-tokens-list

  /auth/tokens/{token_id}:
    parameters:
      - $ref: "#/components/parameters/token_id"
    get:
      summary: Get token information
      tags:
        - tokens
      responses:
        "200":
          $ref: "#/components/responses/AuthTokenMeta"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
      operationId: auth-tokens-get
    put:
      summary: Update token
      tags:
        - tokens
      requestBody:
        $ref: "#/components/requestBodies/AuthTokenPatch"
      responses:
        "200":
          $ref: "#/components/responses/AuthToken"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
      operationId: auth-tokens-update
    delete:
      summary: Delete token
      tags:
        - tokens
      responses:
        "200":
          $ref: "#/components/responses/ResourceDeleted"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
      operationId: auth-tokens-delete
  # "/projects/{project_id}/secrets/{secret_type}/{secret_id}/revisions":
  #   parameters:
  #     - $ref: "#/components/parameters/project_id"
  #     - $ref: "#/components/parameters/secret_type"
  #   get:
  #     parameters:
  #       - $ref: "#/components/parameters/pagination_page"
  #     summary: List project secrets of a specific type
  #     tags:
  #       - secrets
  #     security:
  #       - token: []
  #       - cookie: []
  #     responses:
  #       "200":
  #         $ref: "#/components/responses/ListSecrets"
  #       "404":
  #         $ref: "#/components/responses/ResourceNotFound"
  #       "403":
  #         $ref: "#/components/responses/Unauthorised"
  #     operationId: projects-secrets-list
  #     description: List project secrets of a specific type
  # "/projects/{project_id}/secrets/{secret_type}/{secret_id}/revisions/{revision_id}":
  #   parameters:
  #     - $ref: "#/components/parameters/project_id"
  #     - $ref: "#/components/parameters/secret_type"
  #   get:
  #     parameters:
  #       - $ref: "#/components/parameters/pagination_page"
  #     summary: List project secrets of a specific type
  #     tags:
  #       - secrets
  #     security:
  #       - token: []
  #       - cookie: []
  #     responses:
  #       "200":
  #         $ref: "#/components/responses/Secret"
  #       "404":
  #         $ref: "#/components/responses/ResourceNotFound"
  #       "403":
  #         $ref: "#/components/responses/Unauthorised"
  #     operationId: projects-secrets-revision-get
  #     description: List project secrets of a specific type
  # "/organisations/{organisation_id}/secrets":

#   /providers:
#     get:
#       summary: Get available providers
#       tags:
#         - providers
#       responses:
#         '200':
#           $ref: '#/components/responses/GetProvidersSuccessResponse'
#       operationId: get-providers
#       description: Retrieve a list of all providers with their respective deployed regions and cities.
#       security:
#         - JWT: []

components:
  # schemas
  schemas:
    NotFoundResponse:
      description: "Resource not found"
      type: object
      properties:
        message:
          type: string
      required:
        - message
    UnauthorisedResponse:
      description: "Unauthorised"
      type: object
      properties:
        message:
          type: string
      required:
        - message
    BadRequestResponse:
      description: "Bad request"
      type: object
      properties:
        message:
          type: string
        fields:
          type: object
          properties:
            email:
              type: string
      required:
        - message
        - fields
    ConflictResponse:
      description: "Conflict Response"
      type: object
      properties:
        message:
          type: string
      required:
        - message
    DeletedResponse:
      description: "Deleted Response"
      type: object
      properties:
        message:
          type: string
      required:
        - message

    Date:
      description: Object date information
      type: object
      properties:
        created_at:
          type: string
          description: UTC creation datetime (ISO 8601 date format)
          format: datetime
          example: 2023-07-22T14:50:13Z20230722T145013Z
        updated_at:
          type: string
          description: UTC update datetime (ISO 8601 date format)
          format: datetime
          example: 2023-07-22T14:50:13Z20230722T145013Z
      required:
        - created_at
        - updated_at

    AuthTokenBody:
      description: API auth token create
      type: object
      properties:
        name:
          type: string
          description: Token name
          example: Build token
        expiry_duration:
          type: integer
          description: Token expiration duration in days. 0 - token will never expire
      required:
        - name
        - expiry_duration

    AuthTokenPatch:
      description: API auth token patch
      properties:
        name:
          type: string
          description: Token name
          example: My updated token
        expiry_duration:
          type: integer
          description: Token expiration duration in days. 0 - token will never expire

    AuthToken:
      description: API auth token
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 51687d2f-07b0-4260-8ecb-f5098305fdd4
        user_id:
          type: string
          description: User
          format: uuid
          example: a01594c7-3ebf-4ad1-8565-a7895e9c2d49
        name:
          type: string
          description: Token name
          example: "Build token"
        expiry_at:
          type: string
          format: datetime
          example: 2023-07-22T14:50:13Z20230722T145013Z
        token:
          type: string
          description: OAuth2 client id and client secret used to generate API access token. Client secret can't be created and must be saved on user side
          example: 51687d2f-07b0-4260-8ecb-f5098305fdd4@T.KcV~_96jfOoD5ixFP8qu0Spm
        date:
          $ref: "#/components/schemas/Date"
      required:
        - id
        - name
        - user_id
        - date

    AuthTokenMeta:
      description: API auth token meta
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 51687d2f-07b0-4260-8ecb-f5098305fdd4
        user_id:
          type: string
          description: User
          format: uuid
          example: a01594c7-3ebf-4ad1-8565-a7895e9c2d49
        name:
          type: string
          example: "Build token"
        expiry_at:
          type: string
          format: datetime
          example: 2023-07-22T14:50:13Z20230722T145013Z
        date:
          $ref: "#/components/schemas/Date"
      required:
        - id
        - name
        - user_id
        - date

    ListAuthTokens:
      type: object
      description: "List of auth tokens"
      properties:
        meta:
          $ref: "#/components/schemas/PaginationMeta"
          links:
            $ref: "#/components/schemas/PaginationLinks"
        data:
          type: array
          items:
            $ref: "#/components/schemas/AuthTokenMeta"
      required:
        - meta
        - data

    PaginationMeta:
      description: Meta object for pagination use
      type: object
      properties:
        results:
          type: integer
          example: 200
        start:
          type: integer
          example: 20
        end:
          type: integer
          example: 40
        pages:
          type: integer
          example: 20
        links:
          $ref: "#/components/schemas/PaginationLinks"
      required:
        - results
        - start
        - end
        - pages
        - links
    PaginationLinks:
      description: Links object for pagination use
      type: object
      properties:
        prev:
          type: string
          minLength: 1
          example: /{url}?page[before]=20&page[size]=20
        next:
          type: string
          minLength: 1
          example: /{url}?page[after]=40&page[size]=20
      required:
        - prev
        - next
    OrganisationResponse:
      description: Organisation response
      type: object
      properties:
        id:
          type: string
          description: Organisation id
          format: uuid
          minLength: 1
          example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
        user_id:
          type: string
          description: User id
          format: uuid
          minLength: 1
          example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
        name:
          type: string
          description: Organisation name
          minLength: 1
          example: my org
        # date:
        #   $ref: "#/components/schemas/Date"
      required:
        - id
        - user_id
        - name
        # - date
    ListOrganisationResponse:
      description: List organisations schema
      type: object
      properties:
        meta:
          $ref: "#/components/schemas/PaginationMeta"
          links:
            $ref: "#/components/schemas/PaginationLinks"
        data:
          type: array
          items:
            $ref: "#/components/schemas/OrganisationResponse"
      required:
        - meta
        - data
    OrganisationBody:
      description: Organisation body
      type: object
      properties:
        name:
          type: string
          minLength: 1
          description: Organisation name
          example: my org
      required:
        - name

    ListProjectResponse:
      type: object
      description: "List of projects"
      properties:
        meta:
          $ref: "#/components/schemas/PaginationMeta"
          links:
            $ref: "#/components/schemas/PaginationLinks"
        data:
          type: array
          items:
            $ref: "#/components/schemas/ProjectResponse"
      required:
        - meta
        - data
    ProjectResponse:
      description: Project response
      type: object
      properties:
        id:
          type: string
          description: Project id
          format: uuid
          minLength: 1
          example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
        org_id:
          type: string
          description: Organisation id
          format: uuid
          minLength: 1
          example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
        name:
          type: string
          description: Project name
          minLength: 1
          example: my project
        # date:
        #   $ref: "#/components/schemas/Date"
      required:
        - id
        - org_id
        - name
        # - date
    ProjectBody:
      description: Project body
      type: object
      properties:
        org_id:
          type: string
          minLength: 1
          description: Organisation id
          format: uuid
          example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
        name:
          type: string
          minLength: 1
          description: Project name
          example: first api
      required:
        - org_id
        - name

    ProjectBodyPatch:
      description: Project patch fields
      type: object
      properties:
        org_id:
          type: string
          minLength: 1
          description: Organisation id
          format: uuid
        name:
          type: string
          minLength: 1
          description: Project name
    # secrets
    ListSecretResponse:
      type: object
      description: "List of secrets"
      properties:
        meta:
          $ref: "#/components/schemas/PaginationMeta"
          links:
            $ref: "#/components/schemas/PaginationLinks"
        data:
          type: array
          items:
            $ref: "#/components/schemas/SecretMetaResponse"
      required:
        - meta
        - data

    SecretResponse:
      description: Secret response
      type: object
      properties:
        name:
          type: string
          description: Secret name
          minLength: 1
          pattern: "^[A-Z_]+$"
        type:
          $ref: "#/components/schemas/SecretCreateType"
        payload:
          oneOf:
            - $ref: "#/components/schemas/SecretMetaResponseCertificatePayload"
            - $ref: "#/components/schemas/SecretMetaResponseRegistryPayload"
        revision:
          type: integer
          description: Secret revision
          example: 32
        date:
          $ref: "#/components/schemas/Date"
      required:
        - name
        - type
        - revision
        - date

    SecretMetaType:
      description: "Secrets types: registry, certificate, environment, dek"
      enum: ["registry", "certificate", "environment", "dek"]
      example: "registry"

    SecretMetaResponse:
      description: Secret metadata response
      type: object
      properties:
        name:
          type: string
          description: Project name
          minLength: 1
          pattern: "^[A-Z_]+$"
        type:
          $ref: "#/components/schemas/SecretMetaType"
        payload:
          oneOf:
            - $ref: "#/components/schemas/SecretMetaResponseCertificatePayload"
            - $ref: "#/components/schemas/SecretMetaResponseRegistryPayload"
            - $ref: "#/components/schemas/SecretMetaResponseDek"
        revision:
          type: integer
          description: Secret revision
          example: 23
        date:
          $ref: "#/components/schemas/Date"
      required:
        - name
        - type
        - date
        - revision

    SecretMetaResponseCertificatePayload:
      description: Secret metadata certificate payload
      type: object
      properties:
        certificate:
          type: string
          minLength: 1
          description: Public SSL certificate
          example: "<x509 content>"
          format: string
      required:
        - certificate

    SecretMetaResponseRegistryPayload:
      description: Secret metadata registry payload
      type: object
      properties:
        registry:
          type: string
          minLength: 1
          description: Registry domain
          example: ghcr.io
          format: string
      required:
        - registry

    SecretMetaResponseDek:
      description: "DEK secret, `type: dek`"
      type: object
      properties:
        public:
          type: string
          description: Base64 encoded DEK public key
      required:
        - public

    SecretCreatePayload:
      description: Payload for secret
      type: object
      oneOf:
        - $ref: "#/components/schemas/SecretRegistry"
        - $ref: "#/components/schemas/SecretEnvironment"
        - $ref: "#/components/schemas/SecretCertificate"

    SecretCreateType:
      description: "Secrets types: registry, certificate, environment"
      enum: ["registry", "certificate", "environment"]
      example: "registry"

    SecretEnvironment:
      description: "Encrypted ENV secret, `type: environment`"
      type: object
      properties:
        environment_value:
          type: string
          format: base64
          description: Encrypted environment pairs (key - env key, value - env value)
          example: SGVsbG8gd29ybGQ=
      required:
        - environment_value

    SecretCertificate:
      description: "Encrypted SSL private key and plain certificate.
        Certificate expected in x509 pem format, key expected in pkcs8 or pkcs1 pem format.
        `type: certificate`"
      type: object
      properties:
        certificate:
          type: string
          description: Public certificate
          example: <x509 certificate pem format>
        certificate_value:
          type: string
          format: base64
          description: Encrypted certificate private key
          example: <base64 encrypted pkcs8 or pkcs1 pem format>
      required:
        - certificate
        - certificate_value

    SecretRegistry:
      description: "Encrypted private container registry, `type: registry`"
      type: object
      properties:
        registry:
          type: string
          format: url
          description: Url to private container repository (for docker registry use https://index.docker.io/v1/)
          example: https://index.docker.io/v1/
        registry_value:
          type: string
          format: base64
          description: Token used for auth to the registry
          example: SGVsbG8gd29ybGQ=
      required:
        - registry
        - registry_value

    SecretBody:
      description: Secret body
      type: object
      properties:
        name:
          type: string
          minLength: 1
          description: Secret name
          pattern: "^[A-Z_]+$"
        type:
          $ref: "#/components/schemas/SecretCreateType"
        payload:
          $ref: "#/components/schemas/SecretCreatePayload"
        encryption:
          type: string
          description: Encryption entity
          example: keys/dek/123
      required:
        - name
        - type
        - payload
        - encryption
    # SecretBodyCertificatePayload:
    #   description: Secret body certificate payload
    #   type: object
    #   properties:
    #     domain:
    #       type: string
    #       minLength: 1
    #       description: Domain
    #       example: "my-app.com"
    #       format: string
    #     secret:
    #       type: string
    #       minLength: 1
    #       description: Base64 encoded certificate
    #   required:
    #     - domain
    #     - secret
    # SecretBodyEnvironmentPayload:
    #   description: Secret body environment payload
    #   type: object
    #   properties:
    #     env:
    #       type: string
    #       minLength: 1
    #       description: Environment name
    #       example: MY_SCRET_NAME
    #       format: string
    #       pattern: "^[A-Z_]+$"
    #     secret:
    #       type: string
    #       minLength: 1
    #       description: Base64 encoded secret value
    #   required:
    #     - env
    #     - secret
    # SecretBodyRegistryPayload:
    #   description: Secret body registry payload
    #   type: object
    #   properties:
    #     registry:
    #       type: string
    #       minLength: 1
    #       description: Registry domain
    #       example: ghcr.io
    #       format: string
    #     secret:
    #       type: string
    #       minLength: 1
    #       description: Base64 encoded token
    #   required:
    #     - registry
    #     - secret
    SecretBodyPatch:
      description: Secret body patch fields
      type: object
      properties:
        type:
          $ref: "#/components/schemas/SecretCreateType"
        payload:
          $ref: "#/components/schemas/SecretCreatePayload"
        encryption:
          type: string
          description: Encryption entity
          example: keys/dek/123
      required:
        - type
        - payload
        - encryption

  # responses
  responses:
    NoContent:
      description: The resources were updated successfully
    Unauthorised:
      description: Unauthorised
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UnauthorisedResponse"
          examples:
            generic-unauthorised-response:
              value:
                message: "Unauthorised"
    ResourceNotFound:
      description: Resource Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NotFoundResponse"
          examples:
            generic-not-found-response:
              value:
                message: "Resource not found"
    ResourceConflict:
      description: Resource Conflict
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ConflictResponse"
          examples:
            generic-conflict-response:
              value:
                message: "Conflict, Resource already exists"
    ResourceDeleted:
      description: Resource deleted
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DeletedResponse"
          examples:
            generic-deleted-response:
              value:
                message: "Resource deleted"
    BadRequest:
      description: Resource Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BadRequestResponse"
          examples:
            generic-bad-request-response:
              value:
                message: "Missing fields"
                fields:
                  generic_field: Valid field required

    AuthToken:
      description: OAuth2 with client id and client secret
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuthToken"

    AuthTokenMeta:
      description: Token meta information
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuthTokenMeta"

    AuthTokenList:
      description: List of auth token meta
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ListAuthTokens"

    ListOrganisations:
      description: List organisations
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ListOrganisationResponse"
    Organisation:
      description: Get organisation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OrganisationResponse"

    ListProjects:
      description: List projects
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ListProjectResponse"
    Project:
      description: Get project
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProjectResponse"

    ListSecrets:
      description: List secrets
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ListSecretResponse"

    Secret:
      description: Get secret
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SecretResponse"

    SecretMeta:
      description: Get secret metadata
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SecretMetaResponse"
          examples:
            secret-meta-registry:
              value:
                name: "FIRST_SECRET"
                type: registry
                payload:
                  registry: "ghcr.io"
                date:
                  created_at: "2023-07-22T14:50:13Z20230722T145013Z"
                  updated_at: "2023-07-22T14:50:13Z20230722T145013Z"
            secret-meta-certificate:
              value:
                name: "FIRST_SECRET"
                type: certificate
                payload:
                  domain: "ghcr.io"
                date:
                  created_at: "2023-07-22T14:50:13Z20230722T145013Z"
                  updated_at: "2023-07-22T14:50:13Z20230722T145013Z"
            secret-meta-environment:
              value:
                name: "FIRST_SECRET"
                type: enviornment
                payload:
                  env: "MY_SECRET_NAME"
                date:
                  created_at: "2023-07-22T14:50:13Z20230722T145013Z"
                  updated_at: "2023-07-22T14:50:13Z20230722T145013Z"

  # request bodies
  requestBodies:
    AuthTokenBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuthTokenBody"
      required: true

    AuthTokenPatch:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuthTokenPatch"
      required: true

    OrganisationBody:
      description: Create/Update any field
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OrganisationBody"
    ProjectBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProjectBody"
      description: Create/Update any field
    ProjectBodyPatch:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProjectBodyPatch"
      description: Update any field

    SecretBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SecretBody"
          examples:
            secret-registry-create:
              value:
                name: FIRST_API
                type: registry
                payload:
                  registry: "ghcr.io"
                  secret: "VGhpcyBzaG91bGQgYmUgYSBzZWN1cmUgc2VjcmV0LCBnZW5lcmF0ZSBsZW5ndGh5IGNyZWRlbnRpYWxzCg=="
            secret-certificate-create:
              value:
                name: FIRST_API
                type: certificate
                payload:
                  domain: "my-app.com"
                  secret: "VGhpcyB3b3VsZCBiZSB5b3VyIGNlcnRpZmljYXRlCg=="
            secret-environment-create:
              value:
                name: FIRST_API
                type: environment
                payload:
                  env: "MY_FIRST_SECRET"
                  secret: "bXkgc2VjcmV0IHZhbHVlCg=="
      description: Create/Update any field
      required: true
    SecretBodyPatch:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SecretBodyPatch"
      description: Update any field
      required: true

  # parameters
  parameters:
    pagination_page:
      in: query
      name: page
      schema:
        type: object
        properties:
          before:
            type: integer
            example: 20
            description: Offset
          after:
            type: integer
            example: 20
            description: Offset
          size:
            type: integer
            example: 20
            description: Limit
      style: deepObject
      explode: true
      description: Query parameters for pagination
    organisation_id:
      name: organisation_id
      in: path
      required: true
      schema:
        type: string
        format: uuid
        example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
      description: Organisation ID reference
    project_id:
      name: project_id
      in: path
      required: true
      schema:
        type: string
        format: uuid
        example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
      description: Project ID reference
    # secrets
    secret_type:
      in: query
      name: secret_type
      schema:
        $ref: "#/components/schemas/SecretMetaType"
      description: Type of secret to filter on
    secret_name:
      name: secret_name
      in: path
      required: true
      schema:
        type: string
        minLength: 1
        example: MY_SECRET
        pattern: "^[A-Z_]+$"
      description: Unique secret name
    token_id:
      name: token_id
      in: path
      required: true
      schema:
        type: string
        format: uuid
        example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
      description: Token ID reference

  securitySchemes:
    token:
      type: apiKey
      in: header
      name: "QERNAL-AUTH-TOKEN"
    cookie:
      type: apiKey
      in: cookie
      name: qernal_kratos_session

# tags
tags:
  - name: projects
    description: Project operations, projects belong to an organisation
  - name: organisations
    description: Organisations are a hierarchy top-level for a user, they allow for organising of projects
  - name: secrets
    description: Secret operations for certificates, environment and container registry
  - name: tokens
    description: Auth tokens for third party clients
