openapi: 3.0.0
info:
  title: Chaos
  version: "1.0.0"
  description: Central Management API - publicly exposed set of APIs for managing deployments
  contact:
    email: support@qernal.com
  x-logo:
    url: /assets/components/Chaos.png
    backgroundColor: "#FFFFFF"
    altText: Qernal Chaos
servers:
  - url: "https://chaos.qernal.com/v1"
    description: Production
security:
  - token: []
  - cookie: []

paths:
  # organisations
  "/organisations":
    get:
      parameters:
        - $ref: "#/components/parameters/pagination_page"
        - $ref: "#/components/parameters/filter_name"
      summary: List organisations
      tags:
        - organisations
      security:
        - token: []
        - cookie: []
      responses:
        "200":
          $ref: "#/components/responses/ListOrganisations"
        "403":
          $ref: "#/components/responses/Unauthorised"
      operationId: organisations-list
      description: List organisations
    post:
      summary: Create organisations
      operationId: organisations-create
      responses:
        "201":
          $ref: "#/components/responses/Organisation"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Unauthorised"
        "409":
          $ref: "#/components/responses/ResourceConflict"
      description: Create an organisation
      tags:
        - organisations
      security:
        - token: []
        - cookie: []
      requestBody:
        $ref: "#/components/requestBodies/OrganisationBody"

  "/organisations/{organisation_id}":
    parameters:
      - $ref: "#/components/parameters/organisation_id"
    get:
      summary: Get an organisation
      tags:
        - organisations
      security:
        - token: []
        - cookie: []
      responses:
        "200":
          $ref: "#/components/responses/Organisation"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "403":
          $ref: "#/components/responses/Unauthorised"
      operationId: organisations-get
      description: Get a single organisation
    put:
      summary: Update an organisation
      operationId: organisations-update
      responses:
        "200":
          $ref: "#/components/responses/Organisation"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Unauthorised"
      description: Update an organisation
      tags:
        - organisations
      security:
        - token: []
        - cookie: []
      requestBody:
        $ref: "#/components/requestBodies/OrganisationBody"
    delete:
      summary: Delete an organisation
      operationId: organisations-delete
      responses:
        "200":
          $ref: "#/components/responses/ResourceDeleted"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "403":
          $ref: "#/components/responses/Unauthorised"
      description: Delete organisation, this will also delete all the resources within the organisation
      tags:
        - organisations
      security:
        - token: []
        - cookie: []

  "/organisations/{organisation_id}/projects":
    parameters:
      - $ref: "#/components/parameters/organisation_id"
    get:
      parameters:
        - $ref: "#/components/parameters/pagination_page"
      summary: Get all projects within an organisation
      tags:
        - projects
      security:
        - token: []
        - cookie: []
      responses:
        "200":
          $ref: "#/components/responses/ListProjects"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "403":
          $ref: "#/components/responses/Unauthorised"
      operationId: organisations-projects-list
      description: Get all the projects linked to a specific organisation

  # projects
  "/projects":
    get:
      parameters:
        - $ref: "#/components/parameters/pagination_page"
        - $ref: "#/components/parameters/filter_name"
      summary: List projects
      tags:
        - projects
      security:
        - token: []
        - cookie: []
      responses:
        "200":
          $ref: "#/components/responses/ListProjects"
        "403":
          $ref: "#/components/responses/Unauthorised"
      operationId: projects-list
      description: "Get all projects for this user, paginated"
    post:
      summary: Create project
      operationId: projects-create
      responses:
        "201":
          $ref: "#/components/responses/Project"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Unauthorised"
        "409":
          $ref: "#/components/responses/ResourceConflict"
      description: Create a new project
      requestBody:
        $ref: "#/components/requestBodies/ProjectBody"
      tags:
        - projects
      security:
        - token: []
        - cookie: []

  "/projects/{project_id}":
    parameters:
      - $ref: "#/components/parameters/project_id"
    get:
      summary: Get project
      tags:
        - projects
      security:
        - token: []
        - cookie: []
      responses:
        "200":
          $ref: "#/components/responses/Project"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "403":
          $ref: "#/components/responses/Unauthorised"
      operationId: projects-get
      description: Get a specific project
    put:
      summary: Update project
      operationId: projects-update
      responses:
        "200":
          $ref: "#/components/responses/Project"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Unauthorised"
      description: Update project
      requestBody:
        $ref: "#/components/requestBodies/ProjectBodyPatch"
      tags:
        - projects
      security:
        - token: []
        - cookie: []
    delete:
      summary: Delete project
      operationId: projects-delete
      responses:
        "200":
          $ref: "#/components/responses/ResourceDeleted"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "403":
          $ref: "#/components/responses/Unauthorised"
      description: Delete project, this will also delete all the resources within the project
      tags:
        - projects
      security:
        - token: []
        - cookie: []

  # secrets
  "/projects/{project_id}/secrets":
    parameters:
      - $ref: "#/components/parameters/project_id"
    get:
      parameters:
        - $ref: "#/components/parameters/pagination_page"
        - $ref: "#/components/parameters/secret_type"
      summary: List project secrets of a specific type
      tags:
        - secrets
      security:
        - token: []
        - cookie: []
      responses:
        "200":
          $ref: "#/components/responses/ListSecrets"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "403":
          $ref: "#/components/responses/Unauthorised"
      operationId: projects-secrets-list
      description: List project secrets of a specific type
    post:
      summary: Create project secret
      operationId: projects-secrets-create
      responses:
        "201":
          $ref: "#/components/responses/Secret"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Unauthorised"
        "409":
          $ref: "#/components/responses/ResourceConflict"
      description: Create a new project secret
      requestBody:
        $ref: "#/components/requestBodies/SecretBody"
      tags:
        - secrets
      security:
        - token: []
        - cookie: []

  "/projects/{project_id}/secrets/{secret_name}":
    parameters:
      - $ref: "#/components/parameters/project_id"
      - $ref: "#/components/parameters/secret_name"
    get:
      summary: Get project secret
      tags:
        - secrets
      security:
        - token: []
        - cookie: []
      responses:
        "200":
          $ref: "#/components/responses/SecretMeta"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "403":
          $ref: "#/components/responses/Unauthorised"
      operationId: projects-secrets-get
      description: Get a specific project
    put:
      summary: Update project secret
      operationId: projects-secrets-update
      responses:
        "200":
          $ref: "#/components/responses/Secret"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Unauthorised"
      description: Update project
      requestBody:
        $ref: "#/components/requestBodies/SecretBodyPatch"
      tags:
        - secrets
      security:
        - token: []
        - cookie: []
    delete:
      summary: Delete project secret
      operationId: projects-secrets-delete
      responses:
        "200":
          $ref: "#/components/responses/ResourceDeleted"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "403":
          $ref: "#/components/responses/Unauthorised"
      description: Delete project secret, if the secret is still linked to an active/deployed function - it cannot be removed
      tags:
        - secrets
      security:
        - token: []
        - cookie: []

  "/projects/{project_id}/hosts":
    post:
      summary: Create host for project
      description: |
        Assign a host/domain to a project - hosts are globally unique and require verification, so a host cannot be assigned to multiple projects.

        A host can be a valid domain, either a root domain or a subdomain.
      operationId: projects-hosts-create
      tags:
        - hosts
      parameters:
        - $ref: "#/components/parameters/project_id"
      security:
        - token: []
        - cookie: []
      requestBody:
        $ref: "#/components/requestBodies/HostBody"
      responses:
        "200":
          $ref: "#/components/responses/Host"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          $ref: "#/components/responses/ResourceConflict"
    get:
      summary: List hosts for project
      operationId: projects-hosts-list
      parameters:
        - $ref: "#/components/parameters/project_id"
        - $ref: "#/components/parameters/pagination_page"
      security:
        - token: []
        - cookie: []
      tags:
        - hosts
      responses:
        "200":
          $ref: "#/components/responses/ListHosts"
        "404":
          $ref: "#/components/responses/ResourceNotFound"

  "/projects/{project_id}/hosts/{hostname}":
    get:
      summary: Get specific host by hostname
      operationId: projects-hosts-get
      parameters:
        - $ref: "#/components/parameters/project_id"
        - $ref: "#/components/parameters/hostname"
      security:
        - token: []
        - cookie: []
      tags:
        - hosts
      responses:
        "200":
          $ref: "#/components/responses/Host"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
    delete:
      summary: Delete specific host by hostname
      operationId: projects-hosts-delete
      parameters:
        - $ref: "#/components/parameters/project_id"
        - $ref: "#/components/parameters/hostname"
      security:
        - token: []
        - cookie: []
      tags:
        - hosts
      responses:
        "200":
          $ref: "#/components/responses/ResourceDeleted"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
    put:
      summary: Update specific host by hostname
      operationId: projects-hosts-update
      parameters:
        - $ref: "#/components/parameters/project_id"
        - $ref: "#/components/parameters/hostname"
      security:
        - token: []
        - cookie: []
      tags:
        - hosts
      requestBody:
        $ref: "#/components/requestBodies/HostBodyPatch"
      responses:
        "200":
          $ref: "#/components/responses/Host"
        "404":
          $ref: "#/components/responses/ResourceNotFound"

  "/projects/{project_id}/hosts/{hostname}/verify":
    post:
      summary: Schedule host verification task
      operationId: projects-hosts-verify-create
      parameters:
        - $ref: "#/components/parameters/project_id"
        - $ref: "#/components/parameters/hostname"
      security:
        - token: []
        - cookie: []
      tags:
        - hosts
      responses:
        "200":
          $ref: "#/components/responses/Host"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "400":
          $ref: "#/components/responses/BadRequest"

  "/auth/tokens":
    post:
      summary: Create new auth token
      description: |
        Create new auth token for use with the CLI and TF Provider

        ### Warning
        The `token` field is only shown once and can't be retrieved again without generating a new token. Securely save this once the response has been received.
      security:
        - token: []
        - cookie: []
      tags:
        - tokens
      requestBody:
        $ref: "#/components/requestBodies/AuthTokenBody"
      responses:
        "200":
          $ref: "#/components/responses/AuthToken"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
      operationId: auth-tokens-create
    get:
      summary: List all user auth tokens
      tags:
        - tokens
      parameters:
        - $ref: "#/components/parameters/pagination_page"
      security:
        - token: []
        - cookie: []
      responses:
        "200":
          $ref: "#/components/responses/AuthTokenList"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
      operationId: auth-tokens-list

  "/auth/tokens/{token_id}":
    parameters:
      - $ref: "#/components/parameters/token_id"
    get:
      summary: Get token information
      tags:
        - tokens
      security:
        - token: []
        - cookie: []
      responses:
        "200":
          $ref: "#/components/responses/AuthTokenMeta"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
      operationId: auth-tokens-get
    put:
      summary: Update token
      tags:
        - tokens
      security:
        - token: []
        - cookie: []
      requestBody:
        $ref: "#/components/requestBodies/AuthTokenPatch"
      responses:
        "200":
          $ref: "#/components/responses/AuthToken"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
      operationId: auth-tokens-update
    delete:
      summary: Delete token
      tags:
        - tokens
      security:
        - token: []
        - cookie: []
      responses:
        "200":
          $ref: "#/components/responses/ResourceDeleted"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
      operationId: auth-tokens-delete
  # "/projects/{project_id}/secrets/{secret_type}/{secret_id}/revisions":
  #   parameters:
  #     - $ref: "#/components/parameters/project_id"
  #     - $ref: "#/components/parameters/secret_type"
  #   get:
  #     parameters:
  #       - $ref: "#/components/parameters/pagination_page"
  #     summary: List project secrets of a specific type
  #     tags:
  #       - secrets
  #     security:
  #       - token: []
  #       - cookie: []
  #     responses:
  #       "200":
  #         $ref: "#/components/responses/ListSecrets"
  #       "404":
  #         $ref: "#/components/responses/ResourceNotFound"
  #       "403":
  #         $ref: "#/components/responses/Unauthorised"
  #     operationId: projects-secrets-list
  #     description: List project secrets of a specific type
  # "/projects/{project_id}/secrets/{secret_type}/{secret_id}/revisions/{revision_id}":
  #   parameters:
  #     - $ref: "#/components/parameters/project_id"
  #     - $ref: "#/components/parameters/secret_type"
  #   get:
  #     parameters:
  #       - $ref: "#/components/parameters/pagination_page"
  #     summary: List project secrets of a specific type
  #     tags:
  #       - secrets
  #     security:
  #       - token: []
  #       - cookie: []
  #     responses:
  #       "200":
  #         $ref: "#/components/responses/Secret"
  #       "404":
  #         $ref: "#/components/responses/ResourceNotFound"
  #       "403":
  #         $ref: "#/components/responses/Unauthorised"
  #     operationId: projects-secrets-revision-get
  #     description: List project secrets of a specific type
  # "/organisations/{organisation_id}/secrets":
  # functions
  '/projects/{project_id}/functions':
    get:
      summary: List all functions within a project
      description: List all functions
      parameters:
        - $ref: "#/components/parameters/project_id"
        - $ref: '#/components/parameters/pagination_page'
      security:
        - token: []
        - cookie: []
      tags:
        - functions
      responses:
        '200':
          $ref: '#/components/responses/ListFunction'
      operationId: projects-functions-list
    post:
      summary: Create function
      operationId: projects-functions-create
      parameters:
        - $ref: "#/components/parameters/project_id"
      security:
        - token: []
        - cookie: []
      responses:
        '201':
          $ref: '#/components/responses/Function'
        '400':
          $ref: '#/components/responses/BadRequest'
      description: Create a new function
      requestBody:
        $ref: '#/components/requestBodies/FunctionBody'
      tags:
        - functions

  '/functions/{function_id}':
    parameters:
      - $ref: '#/components/parameters/function_id'
    get:
      summary: Get function (latest revision)
      tags:
        - functions
      security:
        - token: []
        - cookie: []
      responses:
        '200':
          $ref: '#/components/responses/Function'
        '404':
          $ref: '#/components/responses/ResourceNotFound'
      operationId: functions-get
      description: Get a specific function (latest revision)
    put:
      summary: Update function
      operationId: functions-update
      security:
        - token: []
        - cookie: []
      responses:
        '200':
          $ref: '#/components/responses/Function'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/ResourceNotFound'
      tags:
        - functions
      description: Update a function (creates a new revision)
      requestBody:
        $ref: '#/components/requestBodies/FunctionBodyPatch'
    delete:
      summary: Delete function
      operationId: functions-delete
      security:
        - token: []
        - cookie: []
      responses:
        '200':
          $ref: '#/components/responses/ResourceDeleted'
        '404':
          $ref: '#/components/responses/ResourceNotFound'
      tags:
        - functions
      description: Delete a function (and all revisions)

  '/functions/{function_id}/revisions':
    parameters:
      - $ref: '#/components/parameters/function_id'
    get:
      summary: List all revisions for a function
      parameters:
        - $ref: '#/components/parameters/pagination_page'
      security:
        - token: []
        - cookie: []
      tags:
        - functions
      responses:
        '200':
          $ref: '#/components/responses/ListFunction'
      operationId: functions-revisions-list
      description: List all revisions for a function

  '/functions/{function_id}/revisions/{function_revision_id}':
    parameters:
      - $ref: '#/components/parameters/function_id'
      - $ref: '#/components/parameters/function_revision_id'
    get:
      summary: Get a specific revision of a function
      tags:
        - functions
      security:
        - token: []
        - cookie: []
      responses:
        '200':
          $ref: '#/components/responses/Function'
      operationId: functions-revisions-get
      description: Get a specific revision of a function

  # providers
  '/providers':
    get:
      parameters:
        - $ref: '#/components/parameters/pagination_page'
      summary: Get available providers
      tags:
        - providers
      responses:
        '200':
          $ref: '#/components/responses/ListProvider'
      operationId: providers-list
      description: Retrieve a list of all providers with their respective deployed regions and cities.
      security:
        - token: []
        - cookie: []

components:
  # schemas
  schemas:
    NotFoundResponse:
      description: "Resource not found"
      type: object
      properties:
        message:
          type: string
      required:
        - message
    UnauthorisedResponse:
      description: "Unauthorised"
      type: object
      properties:
        message:
          type: string
      required:
        - message
    BadRequestResponse:
      description: "Bad request"
      type: object
      properties:
        message:
          type: string
        fields:
          type: object
          properties:
            email:
              type: string
      required:
        - message
        - fields
    ConflictResponse:
      description: "Conflict Response"
      type: object
      properties:
        message:
          type: string
      required:
        - message
    DeletedResponse:
      description: "Deleted Response"
      type: object
      properties:
        message:
          type: string
      required:
        - message

    Date:
      description: Object date information
      type: object
      properties:
        created_at:
          type: string
          description: UTC creation datetime (ISO 8601 date format)
          format: datetime
          example: 2023-07-22T14:50:13Z20230722T145013Z
        updated_at:
          type: string
          description: UTC update datetime (ISO 8601 date format)
          format: datetime
          example: 2023-07-22T14:50:13Z20230722T145013Z
      required:
        - created_at
        - updated_at

    HostVerificationStatus:
      description: Host verification status
      type: string
      enum: [pending, already_verified, completed, failed]
      example: pending

    Host:
      description: Host response
      type: object
      properties:
        id:
          type: string
          description: Host id
          format: uuid
        host:
          type: string
          description: Hostname, this can be the root of a domain or a subdomain
          example: example-domain.com
          minLength: 1
          # TODO: add domain pattern
        certificate:
          type: string
          description: The secret reference to the certificate
          pattern: '^projects\:secrets/(?<secret_name>[A-Z0-9_]+)$'
          example: "projects:secrets/MY_CERT"
        project_id:
          type: string
          description: Project ID this is attached to
          format: uuid
          minLength: 1
        read_only:
          type: boolean
          description: If the host is read only and cannot be removed, primarily used for *.qrnl.app domains
        disabled:
          type: boolean
          description: If the host is disabled, then this host won't be accessible and so the deployments will not be routable
        txt_verification:
          type: string
          description: TXT record of host to verify ownership - if this record is removed, it may become unverified as this is checked periodically to continually verify ownership
          example: qernal=my.app=KSjfasiqwePdsakm12kdas3
        verified_at:
          type: string
          description: UTC datetime when the host was verified (ISO 8601 date format).
          format: datetime
          example: 2023-07-22T14:50:13Z20230722T145013Z
        date:
          $ref: "#/components/schemas/Date"
        verification_status:
          $ref: "#/components/schemas/HostVerificationStatus"
      required:
        - id
        - host
        - project_id
        - read_only
        - disabled
        - txt_verification
        - date
        - verification_status

    ListHosts:
      type: object
      description: "List of projects hosts"
      properties:
        meta:
          $ref: "#/components/schemas/PaginationMeta"
          links:
            $ref: "#/components/schemas/PaginationLinks"
        data:
          type: array
          items:
            $ref: "#/components/schemas/Host"
      required:
        - meta
        - data

    HostBody:
      description: Host body
      type: object
      properties:
        host: #resolve:true
          $ref: '#/components/schemas/Host/properties/host'
        certificate: #resolve:true
          $ref: '#/components/schemas/Host/properties/certificate'
        disabled: #resolve:true
          $ref: '#/components/schemas/Host/properties/disabled'
      required:
        - host
        - certificate
        - disabled

    HostBodyPatch:
      description: Host body update
      type: object
      properties:
        certificate: #resolve:true
          $ref: '#/components/schemas/Host/properties/certificate'
        disabled: #resolve:true
          $ref: '#/components/schemas/Host/properties/disabled'

    AuthTokenBody:
      description: API auth token create
      type: object
      properties:
        name:
          type: string
          description: Name of token
          example: tf-token
          pattern: "^[A-z-]+$"
        expiry_duration:
          type: integer
          description: Token expiration duration in days. 0 - token will never expire
          example: 90
      required:
        - name
        - expiry_duration

    AuthTokenPatch:
      description: API auth token patch
      properties:
        name: #resolve:true
          $ref: '#/components/schemas/AuthTokenBody/properties/name'
        expiry_duration: #resolve:true
          $ref: '#/components/schemas/AuthTokenBody/properties/expiry_duration'

    AuthToken:
      description: API auth token
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Auth token uuid
          example: 51687d2f-07b0-4260-8ecb-f5098305fdd4
        user_id:
          type: string
          description: User
          format: uuid
          example: a01594c7-3ebf-4ad1-8565-a7895e9c2d49
        name:
          type: string
          description: Name of token
          example: "TF Token"
        expiry_at:
          type: string
          format: datetime
          example: 2023-07-22T14:50:13Z20230722T145013Z
          description: When the token expires
        token:
          type: string
          description: Combined token required for requesting an access token, this field is only returned once on creation or update (during regeneration).
          example: 51687d2f-07b0-4260-8ecb-f5098305fdd4@T.KcV~_96jfOoD5ixFP8qu0Spm
        date:
          $ref: "#/components/schemas/Date"
      required:
        - id
        - name
        - user_id
        - date

    AuthTokenMeta:
      description: API auth token meta
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 51687d2f-07b0-4260-8ecb-f5098305fdd4
        user_id:
          type: string
          description: User
          format: uuid
          example: a01594c7-3ebf-4ad1-8565-a7895e9c2d49
        name:
          type: string
          description: Name of token
          example: "TF Token"
        expiry_at:
          type: string
          format: datetime
          example: 2023-07-22T14:50:13Z20230722T145013Z
        date:
          $ref: "#/components/schemas/Date"
      required:
        - id
        - name
        - user_id
        - date

    ListAuthTokens:
      type: object
      description: "List of auth tokens"
      properties:
        meta:
          $ref: "#/components/schemas/PaginationMeta"
          links:
            $ref: "#/components/schemas/PaginationLinks"
        data:
          type: array
          items:
            $ref: "#/components/schemas/AuthTokenMeta"
      required:
        - meta
        - data

    PaginationMeta:
      description: Meta object for pagination use
      type: object
      properties:
        results:
          type: integer
          example: 200
        start:
          type: integer
          example: 20
        end:
          type: integer
          example: 40
        pages:
          type: integer
          example: 20
        links:
          $ref: "#/components/schemas/PaginationLinks"
      required:
        - results
        - start
        - end
        - pages
        - links
    PaginationLinks:
      description: Links object for pagination use
      type: object
      properties:
        prev:
          type: string
          minLength: 1
          example: /{url}?page[before]=20&page[size]=20
        next:
          type: string
          minLength: 1
          example: /{url}?page[after]=40&page[size]=20
      required:
        - prev
        - next
    OrganisationResponse:
      description: Organisation response
      type: object
      properties:
        id:
          type: string
          description: Organisation id
          format: uuid
          minLength: 1
          example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
        user_id:
          type: string
          description: User id
          format: uuid
          minLength: 1
          example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
        name:
          type: string
          description: Organisation name
          minLength: 1
          pattern: "^[A-z-]+$"
          example: my-org
        date:
          $ref: "#/components/schemas/Date"
      required:
        - id
        - user_id
        - name
        - date
    ListOrganisationResponse:
      description: List organisations schema
      type: object
      properties:
        meta:
          $ref: "#/components/schemas/PaginationMeta"
          links:
            $ref: "#/components/schemas/PaginationLinks"
        data:
          type: array
          items:
            $ref: "#/components/schemas/OrganisationResponse"
      required:
        - meta
        - data
    OrganisationBody:
      description: Organisation body
      type: object
      properties:
        name: #resolve:true
          $ref: '#/components/schemas/OrganisationResponse/properties/name'
      required:
        - name

    ListProjectResponse:
      type: object
      description: "List of projects"
      properties:
        meta:
          $ref: "#/components/schemas/PaginationMeta"
          links:
            $ref: "#/components/schemas/PaginationLinks"
        data:
          type: array
          items:
            $ref: "#/components/schemas/ProjectResponse"
      required:
        - meta
        - data
    ProjectResponse:
      description: Project response
      type: object
      properties:
        id:
          type: string
          description: Project id
          format: uuid
          minLength: 1
          example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
        org_id:
          type: string
          description: Organisation id
          format: uuid
          minLength: 1
          example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
        name:
          type: string
          description: Project name
          minLength: 1
          pattern: "^[A-z-]+$"
          example: first-api
        date:
          $ref: "#/components/schemas/Date"
      required:
        - id
        - org_id
        - name
        - date
    ProjectBody:
      description: Project body
      type: object
      properties:
        org_id: #resolve:true
          $ref: '#/components/schemas/ProjectResponse/properties/org_id'
        name: #resolve:true
          $ref: '#/components/schemas/ProjectResponse/properties/name'
      required:
        - org_id
        - name

    ProjectBodyPatch:
      description: Project patch fields
      type: object
      properties:
        org_id: #resolve:true
          $ref: '#/components/schemas/ProjectResponse/properties/org_id'
        name: #resolve:true
          $ref: '#/components/schemas/ProjectResponse/properties/name'

    # secrets
    ListSecretResponse:
      type: object
      description: "List of secrets"
      properties:
        meta:
          $ref: "#/components/schemas/PaginationMeta"
          links:
            $ref: "#/components/schemas/PaginationLinks"
        data:
          type: array
          items:
            $ref: "#/components/schemas/SecretMetaResponse"
      required:
        - meta
        - data

    SecretResponse:
      description: Secret response
      type: object
      properties:
        name:
          type: string
          description: Secret name
          minLength: 1
          pattern: "^[A-Z_]+$"
          example: MY_SECRET
        type:
          $ref: "#/components/schemas/SecretCreateType"
        payload:
          oneOf:
            - $ref: "#/components/schemas/SecretMetaResponseCertificatePayload"
            - $ref: "#/components/schemas/SecretMetaResponseRegistryPayload"
        revision:
          type: integer
          description: Secret revision
          example: 32
        date:
          $ref: "#/components/schemas/Date"
      required:
        - name
        - type
        - revision
        - date

    SecretMetaType:
      description: "Secrets types: registry, certificate, environment, dek"
      enum: ["registry", "certificate", "environment", "dek"]
      example: "registry"

    SecretMetaResponse:
      description: Secret metadata response
      type: object
      properties:
        name: #resolve:true
          $ref: '#/components/schemas/SecretResponse/properties/name'
        type:
          $ref: "#/components/schemas/SecretMetaType"
        payload:
          oneOf:
            - $ref: "#/components/schemas/SecretMetaResponseCertificatePayload"
            - $ref: "#/components/schemas/SecretMetaResponseRegistryPayload"
            - $ref: "#/components/schemas/SecretMetaResponseDek"
        revision: #resolve:true
          $ref: '#/components/schemas/SecretResponse/properties/revision'
        date:
          $ref: "#/components/schemas/Date"
      required:
        - name
        - type
        - date
        - revision

    SecretMetaResponseCertificatePayload:
      description: Secret metadata certificate payload
      type: object
      properties:
        certificate:
          type: string
          minLength: 1
          description: Public SSL certificate
          example: "<x509 content>"
          format: string
      required:
        - certificate

    SecretMetaResponseRegistryPayload:
      description: Secret metadata registry payload
      type: object
      properties:
        registry:
          type: string
          description: |
            Private registry domain/location, when using the private docker hub registry sepcify `docker.io`
            > Without http scheme
          example: ghcr.io
          format: hostname
      required:
        - registry

    SecretMetaResponseDek:
      description: "DEK secret, `type: dek`"
      type: object
      properties:
        public:
          type: string
          description: Base64 encoded DEK public key
      required:
        - public

    SecretCreatePayload:
      description: Payload for secret
      type: object
      oneOf:
        - $ref: "#/components/schemas/SecretRegistry"
        - $ref: "#/components/schemas/SecretEnvironment"
        - $ref: "#/components/schemas/SecretCertificate"

    SecretCreateType:
      description: "Secrets types: registry, certificate, environment"
      enum: ["registry", "certificate", "environment"]
      example: "registry"

    SecretEnvironment:
      description: "Encrypted ENV secret, `type: environment`"
      type: object
      properties:
        environment_value:
          type: string
          format: base64
          description: Encrypted environment pairs (key - env key, value - env value)
          example: SGVsbG8gd29ybGQ=
      required:
        - environment_value

    SecretCertificate:
      description: "Encrypted SSL private key and plain certificate.
        Certificate expected in x509 pem format, key expected in pkcs8 or pkcs1 pem format.
        `type: certificate`"
      type: object
      properties:
        certificate:
          type: string
          description: Public certificate
          example: <x509 certificate pem format>
        certificate_value:
          type: string
          format: base64
          description: Encrypted certificate private key
          example: <base64 encrypted pkcs8 or pkcs1 pem format>
      required:
        - certificate
        - certificate_value

    SecretRegistry:
      description: "Encrypted private container registry, `type: registry`"
      type: object
      properties:
        registry: #resolve:true
          $ref: "#/components/schemas/SecretMetaResponseRegistryPayload/properties/registry"
        registry_value:
          type: string
          format: base64
          description: Token used for auth to the registry
          example: SGVsbG8gd29ybGQ=
      required:
        - registry
        - registry_value

    SecretBody:
      description: Secret body
      type: object
      properties:
        name: #resolve:true
          $ref: '#/components/schemas/SecretResponse/properties/name'
        type:
          $ref: "#/components/schemas/SecretCreateType"
        payload:
          $ref: "#/components/schemas/SecretCreatePayload"
        encryption:
          type: string
          description: Encryption entity
          example: keys/dek/123
          pattern: "^keys\\/dek\\/[0-9]+$"
      required:
        - name
        - type
        - payload
        - encryption
    SecretBodyPatch:
      description: Secret body patch fields
      type: object
      properties:
        type:
          $ref: "#/components/schemas/SecretCreateType"
        payload:
          $ref: "#/components/schemas/SecretCreatePayload"
        encryption: #resolve:true
          $ref: '#/components/schemas/SecretBody/properties/encryption'
      required:
        - type
        - payload
        - encryption

    Location:
      type: object
      description: Location of allowed clusters
      properties:
        provider_id:
          type: string
          format: uuid
          description: UUID of provider to deploy into
          example: 51687d2f-07b0-4260-8ecb-f5098305fdd4
        continent:
          type: string
          description: Deployment continent
          example: EU
        country:
          type: string
          description: Deployment country
          example: GB
        city:
          type: string
          description: Deployment city
          example: London
      required:
        - provider_id

    FunctionScaling:
      type: object
      description: Scaling logic
      properties:
        type:
          type: string
          description: CPU or Memory supported
          enum: [cpu, memory]
          example: cpu
        low:
          type: integer
          description: For type to drop below before scale down
          minLength: 1
          example: 30
        high:
          type: integer
          description: For type to go above before scale up
          minLength: 1
          example: 60
      required:
        - type
        - low
        - high

    FunctionReplicas:
      type: object
      description: Balancing logic
      properties:
        min:
          type: integer
          description: Minimum number of replicas to have
          minLength: 1
          example: 1
        max:
          type: integer
          description: Maximum number of replicas to have
          minLength: 1
          example: 5
        affinity:
          type: object
          description: Replica strategy
          properties:
            cluster:
              type: boolean
              description: If there are > 1 replica, make sure they're on different clusters
              example: true
            cloud:
              type: boolean
              description: If there are > 1 replica, make sure they're on different clouds
              example: true
          required:
            - cluster
            - cloud
      required:
        - min
        - max
        - affinity

    FunctionEnv:
      type: object
      description: Environment variable for function
      properties:
        name:
          type: string
          description: Key name
          example: MY_ENV_VAR
        reference:
          type: string
          description: Reference to the secret to use
          example: "project_id/secret_id@secret_revision"
          pattern: "^[0-9A-f-]{36}\\/[0-9A-f-]{36}\\@[0-9]+$"
      required:
        - name
        - reference

    FunctionCompliance:
      type: string
      description: |
        Tagged requirements for compliance;
        soc2 = SOC2 compliant data centers
        ipv6 = Function can work within an ipv6 *only* cluster
      enum: [soc2, ipv6]

    FunctionType:
      type: string
      enum: [http, worker]
      description: Type of function, worker types are not exposed to ingress routes
      example: http

    FunctionSize:
      type: object
      description: Size of function, required CPU and Memory
      properties:
        cpu:
          type: integer
          description: |
            CPU in 0.1 vCPU increments, for a whole vCPU specify 1024
            Must be in multiples of 128, with the same multiplier as memory
            from the base
          example: 128
        memory:
          type: integer
          description: |
            Memory in 128 MB increments, values are integer always in MB
            Must be in multiples of 128, with the same multiplier as CPU
            from the base
          example: 128
      required:
        - cpu
        - memory

    FunctionDeployment:
      type: object
      properties:
        id:
          type: string
          description: ID of the deployment
          format: uuid
          example: 51687d2f-07b0-4260-8ecb-f5098305fdd4
        location:
          $ref: "#/components/schemas/Location"
        replicas:
          $ref: "#/components/schemas/FunctionReplicas"
      required:
        - location
        - replicas

    FunctionDeploymentBody:
      type: object
      properties:
        location:
          $ref: "#/components/schemas/Location"
        replicas:
          $ref: "#/components/schemas/FunctionReplicas"
      required:
        - location
        - replicas

    FunctionRoute:
      type: object
      properties:
        path:
          type: string
          description: Can be a regular expression
          example: /hello/{0-9+}
          minLength: 1
        methods:
          type: array
          description: HTTP Verb(s) for this function
          items:
            type: string
            example: GET
          example: [GET, POST]
        weight:
          type: integer
          description: The route weight for consideration
          example: 50
          minLength: 1
      required: [path, methods, weight]

    Function:
      type: object
      description: Function
      properties:
        id:
          type: string
          description: ID of the function
          minLength: 1
          format: uuid
          example: 51687d2f-07b0-4260-8ecb-f5098305fdd4
        project_id:
          type: string
          description: ID of the project this function belongs to
          format: uuid
          example: 51687d2f-07b0-4260-8ecb-f5098305fdd4
        version:
          type: string
          enum: ['1.0.0']
          description: Function spec version
          example: '1.0.0'
        name:
          type: string
          description: Name of the function
          minLength: 1
          example: my-function
        description:
          type: string
          description: Description of what the function does
          example: My function does this
        image:
          type: string
          description: Path to container image
          minLength: 1
          example: docker.io/my-image:latest
        revision:
          type: string
          description: Function revision
          format: uuid
          example: 51687d2f-07b0-4260-8ecb-f5098305fdd4
        type:
          $ref: "#/components/schemas/FunctionType"
        size:
          $ref: "#/components/schemas/FunctionSize"
        port:
          type: integer
          description: Port the application runs on
          example: 8080
        routes:
          type: array
          description: The public route/path to this function, only applicable to http type functions
          items:
            $ref: "#/components/schemas/FunctionRoute"
        scaling:
          $ref: "#/components/schemas/FunctionScaling"
        deployments:
          type: array
          description: List of deployments for this function
          items:
            $ref: "#/components/schemas/FunctionDeployment"
        secrets:
          type: array
          description: List of environment variables for secrets
          items:
            $ref: "#/components/schemas/FunctionEnv"
        compliance:
          type: array
          description: Tags to limit deployment
          items:
            $ref: "#/components/schemas/FunctionCompliance"
      required:
        - id
        - project_id
        - version
        - name
        - description
        - image
        - revision
        - type
        - size
        - port
        - scaling
        - deployments
        - secrets

    FunctionBody:
      description: Function create body
      type: object
      properties:
        project_id: #resolve:true
          $ref: "#/components/schemas/Function/properties/project_id"
        version: #resolve:true
          $ref: "#/components/schemas/Function/properties/version"
        name: #resolve:true
          $ref: "#/components/schemas/Function/properties/name"
        description: #resolve:true
          $ref: "#/components/schemas/Function/properties/description"
        image: #resolve:true
          $ref: "#/components/schemas/Function/properties/image"
        type:
          $ref: "#/components/schemas/FunctionType"
        size:
          $ref: "#/components/schemas/FunctionSize"
        port: #resolve:true
          $ref: "#/components/schemas/Function/properties/port"
        routes:
          type: array
          description: The public route/path to this function, only applicable to http type functions
          items:
            $ref: "#/components/schemas/FunctionRoute"
        scaling:
          $ref: "#/components/schemas/FunctionScaling"
        deployments:
          type: array
          description: List of deployments for this function
          items:
            $ref: "#/components/schemas/FunctionDeploymentBody"
        secrets:
          type: array
          description: List of environment variables for secrets
          items:
            $ref: "#/components/schemas/FunctionEnv"
        compliance:
          type: array
          description: Tags to limit deployment
          items:
            $ref: "#/components/schemas/FunctionCompliance"
      required:
        - project_id
        - version
        - name
        - description
        - image
        - type
        - size
        - port
        - scaling
        - deployments
        - secrets

    ListFunction:
      type: object
      description: 'List of functions'
      properties:
        meta:
          $ref: '#/components/schemas/PaginationMeta'
          links:
            $ref: '#/components/schemas/PaginationLinks'
        data:
          type: array
          items:
            $ref: '#/components/schemas/Function'
      required:
        - meta
        - data

    Provider:
      description: List of providers
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 51687d2f-07b0-4260-8ecb-f5098305fdd4
        name:
          type: string
          minLength: 1
          description: Name of provider
          example: AWS
        locations:
          type: object
          description: Locations at varying levels this provider operates within
          properties:
            continents:
              type: array
              items:
                type: string
                description: Deployment continent
                example: EU
            countries:
              type: array
              items:
                type: string
                description: Deployment country
                example: GB
            cities:
              type: array
              items:
                type: string
                description: Deployment city
                example: London
          required:
            - continents
            - countries
            - cities
      required:
        - id
        - name
        - locations

    ListProviderResponse:
      type: object
      description: "List of providers"
      properties:
        meta:
          $ref: "#/components/schemas/PaginationMeta"
          links:
            $ref: "#/components/schemas/PaginationLinks"
        data:
          type: array
          items:
            $ref: "#/components/schemas/Provider"
      required:
        - meta
        - data


  # responses
  responses:
    NoContent:
      description: The resources were updated successfully
    Unauthorised:
      description: Unauthorised
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UnauthorisedResponse"
          examples:
            generic-unauthorised-response:
              value:
                message: "Unauthorised"
    ResourceNotFound:
      description: Resource Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NotFoundResponse"
          examples:
            generic-not-found-response:
              value:
                message: "Resource not found"
    ResourceConflict:
      description: Resource Conflict
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ConflictResponse"
          examples:
            generic-conflict-response:
              value:
                message: "Conflict, Resource already exists"
    ResourceDeleted:
      description: Resource deleted
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DeletedResponse"
          examples:
            generic-deleted-response:
              value:
                message: "Resource deleted"
    BadRequest:
      description: Resource Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BadRequestResponse"
          examples:
            generic-bad-request-response:
              value:
                message: "Missing fields"
                fields:
                  generic_field: Valid field required
    Host:
      description: Porject host
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Host"

    ListHosts:
      description: List of project hosts
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ListHosts"

    AuthToken:
      description: Generated token response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuthToken"

    AuthTokenMeta:
      description: Token meta information
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuthTokenMeta"

    AuthTokenList:
      description: List of auth token meta
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ListAuthTokens"

    ListOrganisations:
      description: List organisations
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ListOrganisationResponse"
    Organisation:
      description: Get organisation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OrganisationResponse"

    ListProjects:
      description: List projects
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ListProjectResponse"
    Project:
      description: Get project
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProjectResponse"

    ListSecrets:
      description: List secrets
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ListSecretResponse"

    Secret:
      description: Get secret
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SecretResponse"

    SecretMeta:
      description: Get secret metadata
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SecretMetaResponse"
          examples:
            secret-meta-registry:
              value:
                name: "FIRST_SECRET"
                type: registry
                payload:
                  registry: "ghcr.io"
                date:
                  created_at: "2023-07-22T14:50:13Z20230722T145013Z"
                  updated_at: "2023-07-22T14:50:13Z20230722T145013Z"
            secret-meta-certificate:
              value:
                name: "FIRST_SECRET"
                type: certificate
                payload:
                  domain: "ghcr.io"
                date:
                  created_at: "2023-07-22T14:50:13Z20230722T145013Z"
                  updated_at: "2023-07-22T14:50:13Z20230722T145013Z"
            secret-meta-environment:
              value:
                name: "FIRST_SECRET"
                type: enviornment
                payload:
                  env: "MY_SECRET_NAME"
                date:
                  created_at: "2023-07-22T14:50:13Z20230722T145013Z"
                  updated_at: "2023-07-22T14:50:13Z20230722T145013Z"

    ListFunction:
      description: List all functions (paginated)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ListFunction'

    Function:
      description: Get specific function
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Function'

    ListProvider:
      description: List providers
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ListProviderResponse'

  # request bodies
  requestBodies:
    HostBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HostBody"
      required: true

    HostBodyPatch:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HostBodyPatch"
      required: true

    AuthTokenBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuthTokenBody"
      required: true

    AuthTokenPatch:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuthTokenPatch"
      required: true

    OrganisationBody:
      description: Create/Update any field
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OrganisationBody"
    ProjectBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProjectBody"
      description: Create/Update any field
    ProjectBodyPatch:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProjectBodyPatch"
      description: Update any field

    SecretBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SecretBody"
      description: |
        Create/Update any field

        The example generated may only be for one
        of the secret types, look towards the payload section of the schema
        for further fields, values and examples.
      required: true

    SecretBodyPatch:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SecretBodyPatch"
      description: Update any field
      required: true

    FunctionBody:
      description: Create/Update any field
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FunctionBody'
      required: true

    FunctionBodyPatch:
      description: Update any field
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Function'
      required: true

  # parameters
  parameters:
    pagination_page:
      in: query
      name: page
      schema:
        type: object
        properties:
          before:
            type: integer
            example: 20
            description: Offset
          after:
            type: integer
            example: 20
            description: Offset
          size:
            type: integer
            example: 20
            description: Limit
      style: deepObject
      explode: true
      description: Query parameters for pagination
    # organisations
    organisation_id:
      name: organisation_id
      in: path
      required: true
      schema:
        type: string
        format: uuid
        example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
      description: Organisation ID reference
    # projects
    project_id:
      name: project_id
      in: path
      required: true
      schema:
        type: string
        format: uuid
        example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
      description: Project ID reference
    # secrets
    secret_type:
      in: query
      name: secret_type
      schema:
        $ref: "#/components/schemas/SecretMetaType"
      description: Type of secret to filter on
    secret_name:
      name: secret_name
      in: path
      required: true
      schema:
        type: string
        minLength: 1
        example: MY_SECRET
        pattern: "^[A-Z_]+$"
      description: Unique secret name
    # auth
    token_id:
      name: token_id
      in: path
      required: true
      schema:
        type: string
        format: uuid
        example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
      description: Token ID reference
    # hosts
    hostname:
      name: hostname
      in: path
      required: true
      schema:
        type: string
        example: example-domain.com
      description: Hostname
    # functions
    function_id:
      name: function_id
      in: path
      required: true
      schema:
        type: string
        format: uuid
        example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
      description: Function ID reference
    function_revision_id:
      name: function_revision_id
      in: path
      required: true
      schema:
        type: string
        format: uuid
        example: 069614e-adc8-47cb-a69c-decf9c5f90fc
      description: Function revision ID reference
    # generic filters
    filter_name:
      in: query
      name: f_name
      schema:
        type: string
        example: my-proj*
      description: |
        Filter resource on name, if the value ends in an asterix it will be
        treated as a partial search otherwise, it'll be an exact match

  securitySchemes:
    token:
      type: http
      scheme: bearer
    cookie:
      type: apiKey
      in: cookie
      name: qernal_kratos_session

# tags
tags:
  - name: projects
    description: Project operations, projects belong to an organisation
  - name: organisations
    description: Organisations are a hierarchy top-level for a user, they allow for organising of projects
  - name: secrets
    description: Secret operations for certificates, environment and container registry
  - name: tokens
    description: Auth tokens for third party clients
  - name: functions
    description: Function operations, allows deployment of containers via the function endpoints
  - name: providers
    description: List of providers you can use to deploy functions into and their available locations - this includes any private providers attached to your organisation
  - name: hosts
    description: Hosts attached to the project so make functions routeable via the internet